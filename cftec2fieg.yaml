AWSTemplateFormatVersion: '2010-09-09'
Description: "CloudFormation Template para Lambda Function com Trigger do EventBridge e Role IAM."

Parameters:
  BucketName:
    Type: String
    Description: "Nome do bucket S3 centralizador onde os dados das instâncias EC2 serão armazenados"
  
  ManagementAccountId:
    Type: String
    Description: "ID da conta de gerenciamento que possui o bucket S3 centralizador"

Resources:
  SWOEC2MonitoringAppRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SWOEC2MonitoringAppRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SWOEC2MonitoringAppPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeImages
                  - ssm:DescribeInstanceInformation
                  - ssm:ListComplianceItems
                Resource: "*"
              - Effect: Allow
                Action: iam:ListAccountAliases
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub "arn:aws:s3:::${BucketName}/*"

  SWOEC2MonitoringAppFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SWOEC2MonitoringAppFunction
      Handler: index.lambda_handler
      Role: !GetAtt SWOEC2MonitoringAppRole.Arn
      Runtime: python3.9
      Timeout: 60
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          ACCOUNT_NAME: "Undefined"
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              ec2 = boto3.client('ec2')
              iam = boto3.client('iam')
              s3 = boto3.client('s3')
              ssm = boto3.client('ssm')

              # ID e região da conta
              account_id = context.invoked_function_arn.split(":")[4]
              region = os.environ.get("AWS_REGION")

              # Nome da conta a partir da variável de ambiente
              account_name = os.environ.get("ACCOUNT_NAME", "Unknown Account")

              # Obter as informações das instâncias
              instances = ec2.describe_instances()
              instance_info = []
              for reservation in instances['Reservations']:
                  for instance in reservation['Instances']:
                      # Coleta as informações básicas
                      instance_id = instance['InstanceId']
                      instance_type = instance['InstanceType']
                      instance_state = instance['State']['Name']
                      
                      # Obter nome da instância a partir das tags
                      instance_name = next((tag['Value'] for tag in instance.get('Tags', []) if tag['Key'] == 'Name'), "N/A")
                      
                      # Obter as tags swoMonitor, swoBackup e verificar Start-Stop
                      swo_monitor = next((tag['Value'] for tag in instance.get('Tags', []) if tag['Key'] == 'swoMonitor'), "N/A")
                      swo_backup = next((tag['Value'] for tag in instance.get('Tags', []) if tag['Key'] == 'swoBackup'), "N/A")
                      start_stop = "Ativado" if any(tag['Key'] in ['Start', 'Shutdown'] for tag in instance.get('Tags', [])) else "Desativado"

                      # Obter detalhes específicos da plataforma
                      platform_details = instance.get('PlatformDetails', 'Platform Details Not Available')

                      # Obter a role associada
                      iam_instance_profile = instance.get('IamInstanceProfile')
                      instance_role = iam_instance_profile['Arn'].split('/')[-1] if iam_instance_profile else "No Role"
                      
                      # Obter status SSM e contagem de itens de compliance
                      ssm_status = "Not Available"
                      critical_non_compliant_count = 0
                      security_non_compliant_count = 0
                      try:
                          # Obter status de conexão do SSM
                          ssm_instance_info = ssm.describe_instance_information(
                              Filters=[{'Key': 'InstanceIds', 'Values': [instance_id]}]
                          )['InstanceInformationList']
                          ssm_status = ssm_instance_info[0]['PingStatus'] if ssm_instance_info else "Not Available"
                          
                          # Obter itens de compliance
                          compliance_items = ssm.list_compliance_items(
                              ResourceIds=[instance_id],
                              ResourceTypes=["ManagedInstance"],
                              Filters=[{'Key': 'ComplianceType', 'Values': ['Patch']}]
                          )['ComplianceItems']
                          
                          # Contagem de non-compliance por severidade
                          for item in compliance_items:
                              severity = item['Severity']
                              status = item['Status']
                              
                              # Contagem para Critical Non-Compliant
                              if severity == 'CRITICAL' and status == 'NON_COMPLIANT':
                                  critical_non_compliant_count += 1
                                  # Adiciona ao Security Non-Compliant, pois é uma falha crítica de segurança
                                  security_non_compliant_count += 1
                              
                              # Contagem para Security Non-Compliant (inclui itens HIGH e os CRITICAL já contados)
                              elif severity == 'HIGH' and status == 'NON_COMPLIANT':
                                  security_non_compliant_count += 1

                      except Exception:
                          pass
                      
                      # Adiciona os dados coletados ao array
                      instance_info.append({
                          'InstanceId': instance_id,
                          'InstanceName': instance_name,
                          'InstanceType': instance_type,
                          'State': instance_state,
                          'Account': account_name,
                          'Region': region,
                          'PlatformDetails': platform_details,
                          'Role': instance_role,
                          'SSMStatus': ssm_status,
                          'CriticalNonCompliantCount': critical_non_compliant_count,
                          'SecurityNonCompliantCount': security_non_compliant_count,
                          'swoMonitor': swo_monitor,
                          'swoBackup': swo_backup,
                          'StartStop': start_stop
                      })

              # Estrutura de dados por conta e região
              account_data = {
                  'AccountId': account_id,
                  'AccountName': account_name,
                  'Region': region,
                  'Instances': instance_info
              }

              # Salvar as informações no bucket S3
              bucket_name = os.environ.get("BUCKET_NAME")
              file_name = f'instance-info-{account_id}-{region}.json'
              s3.put_object(
                  Bucket=bucket_name,
                  Key=file_name,
                  Body=json.dumps(account_data),
                  ContentType='application/json'
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps(f'Informações das instâncias EC2 enviadas para o S3 para a conta {account_id} na região {region}.')
              }

  SWOEC2StateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SWOEC2StateChangeRule
      Description: "Trigger Lambda on EC2 instance state change"
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "EC2 Instance State-change Notification"
        detail:
          state:
            - pending
            - running
            - shutting-down
            - terminated
            - stopping
            - stopped
      Targets:
        - Arn: !GetAtt SWOEC2MonitoringAppFunction.Arn
          Id: "TargetFunction"
    DependsOn: SWOEC2MonitoringAppFunction

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref SWOEC2MonitoringAppFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt SWOEC2StateChangeRule.Arn

Outputs:
  LambdaFunction:
    Description: "Lambda function ARN"
    Value: !GetAtt SWOEC2MonitoringAppFunction.Arn

  EventBridgeRule:
    Description: "EventBridge Rule ARN"
    Value: !GetAtt SWOEC2StateChangeRule.Arn
